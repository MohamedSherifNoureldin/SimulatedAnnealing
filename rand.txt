# Simulated Annealing Placement Algorithm

## Abstract

This C++ program implements a sophisticated simulated annealing-based placement algorithm for the optimization of logic cell spatial arrangements on an integrated circuit (IC) grid. The principal objective is to minimize the total wire length, a critical metric influencing signal delay and power consumption in IC design. This comprehensive README document provides an exhaustive understanding of the program, encompassing dependencies, data structures, algorithmic nuances, implementation intricacies, results, and guidance on building and running the system.

## 1. Dependencies

The program relies on external libraries and standard C libraries:

- **CImg.h:** A robust C++ image processing library.
- **sys/types.h, sys/stat.h, unistd.h:** Standard C libraries for file and directory manipulation.

Ensuring the proper installation and accessibility of these dependencies is crucial for successful compilation and execution.

## 2. Data Structures

### 2.1 `cell` Structure

Represents an individual logic cell with a nuanced set of attributes:

- **ID:** A unique identifier for the cell.
- **Position (x, y):** Cartesian coordinates defining the cell's precise location on the grid.
- **Nets:** A vector containing the IDs of nets to which the cell is connected. Facilitates efficient net traversal during wire length computations.

### 2.2 `net` Structure

Defines a logical connection between cells with an extensive set of attributes:

- **ID:** A unique identifier for the net.
- **Bounding Box Coordinates (minX, minY, maxX, maxY):** Delimits the spatial extent of the net, essential for computing HPWL.
- **HPWL (Half Perimeter Wire Length):** Quantifies the total wire length of the net, providing a comprehensive measure of net congestion.
- **Cells:** A vector containing the IDs of cells connected by the net. Enables swift identification of cells participating in a given net.

## 3. Usage

The program requires a netlist file detailing cell and connection information. The main function orchestrates a sequence of critical steps:

1. **Parsing Netlist:** Extracts and interprets information from the provided netlist file, initializing cells and nets accordingly.
2. **Random Placement:** Positions cells randomly on the grid, laying the foundation for the simulated annealing process.
3. **Initial Wire Length Calculation:** Determines the initial total wire length of the circuit, serving as a baseline for subsequent optimizations.
4. **Simulated Annealing:** Executes the simulated annealing algorithm to optimize cell placement, leveraging probabilistic acceptance of suboptimal solutions.
5. **Visualization:** Generates visualizations of the grid at different simulated annealing iterations, aiding in the qualitative assessment of algorithmic progression.



## 5. Implementation Details

### 5.1 Grid Visualization

The CImg library is leveraged to visualize the grid at different simulated annealing iterations. Cells are represented as colored rectangles, and optional grid lines enhance the visual interpretability of the algorithmic progression.

### 5.2 Temperature Schedule

The temperature schedule governs the annealing process. Fine-tuning the initial temperature, final temperature, and cooling rate is crucial for balancing exploration and convergence.

## 6. Results

The program generates essential output files for meticulous analysis:

- **Visualizations:** `images/grid_*.png` showcases grid snapshots during various simulated annealing iterations, offering insights into the dynamic evolution of the cell placements.
- **Data Files:** `Temp_TWL.csv` captures wire length vs. temperature data, providing a quantitative understanding of the annealing process's impact on wire length. `CoolingRate_TWL.csv` illustrates the final wire length vs. cooling rate, aiding in the selection of an optimal cooling rate. `CoolingRate_Temp_TWL.csv` details wire length vs. temperature for distinct cooling rates, facilitating a nuanced exploration of the algorithm's behavior.

## 7. Building and Running

Compile the program using the following command:

```bash
g++ main.cpp -O3 -o main -lX11 -lpthread -std=c++17
```

Execute the program:

```bash
./main
```

The program outputs the total wire length, generates visualizations, and provides data files for meticulous analysis. Additionally, it reports the execution time for the simulated annealing algorithm. Parameters and netlist files can be adjusted to tailor the